/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package battleboats;

import battleboats.internet.Player;
import battleboats.internet.SocketHandler;
import battleboats.messages.PlayerListMessage;
import battleboats.messages.SystemMessage;
import battleboats.messages.SystemMessage.MsgType;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import static java.awt.event.KeyEvent.VK_ENTER;
import java.awt.event.KeyListener;
import java.io.IOException;
import javax.swing.DefaultListModel;

/**
 *
 * @author Robert Zwolinski
 */
public class MainLobby extends javax.swing.JFrame {

    private SocketHandler s;
    
    private DefaultListModel listModel;
    
    private ListenThread listenThread;
    
    private StringBuffer chatText = new StringBuffer();
    private volatile boolean running = true;
    
    
    /**
     * Creates new form MainLobby
     */
    public MainLobby(SocketHandler s) {
        
        this.s = s;
        
        initComponents();
        setLocationRelativeTo(null);
        txtSend.requestFocus();
        txtSend.addKeyListener(new EnterListener());
        
        // TODO: Make yourself Bold and at the top of the list
        // also order list alphabetically
        listModel = new DefaultListModel();
        listModel.addElement(s.getPlayer());
        listPlayers.setModel(listModel);
        
        
        listenThread = new ListenThread();
        listenThread.start();
        
    }

    
    
    
    
    
    public class ListenThread extends Thread {
        
        @Override
        public void run(){
            
            while (running){
                
                try {
                    Object newMsg = s.readObject();
                    
                    if (newMsg instanceof PlayerListMessage) {
                        PlayerListMessage plMsg = (PlayerListMessage) newMsg;
                        switch (plMsg.getPLAction()) {
                            case EntireList:
                                listModel.clear();
                                for (Player player : plMsg.getPlayers()) {
                                    listModel.addElement(player);
                                }
                                break;
                            case Remove:
                                listModel.removeElement(plMsg.getPlayer());
                                break;
                            case Add:
                                listModel.addElement(plMsg.getPlayer());
                                break;
                            default:
                                break;
                        }
                    } else if (newMsg instanceof SystemMessage) {
                        SystemMessage sysMsg = (SystemMessage) newMsg;
                        if (sysMsg.getMsgType() == MsgType.Event) {
                            
                            // TODO: Format system messages in italics
                            chatText.append(sysMsg.getMessage());
                            chatText.append("\n");
                            txtChat.setText(chatText.toString());
                        } else if (sysMsg.getMsgType() == MsgType.LobbyChat) {
                            
                            chatText.append(sysMsg.getMessage());
                            chatText.append("\n");
                            txtChat.setText(chatText.toString());
                        }
                    }
                    
                } catch (IOException | ClassNotFoundException ex) {
                    System.out.println("Connection Closed");
                }
                
            }
            
        }
        
    }
    
    
    
    
    
    private class EnterListener extends KeyAdapter {

        @Override
        public void keyPressed(KeyEvent ke) {
            if (ke.getKeyCode() == VK_ENTER) {
                btnSend.doClick();
                ke.consume();
            }
        }
        
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpMainLobby = new javax.swing.JPanel();
        scrollPlayers = new javax.swing.JScrollPane();
        listPlayers = new javax.swing.JList<>();
        scrollChat = new javax.swing.JScrollPane();
        txtChat = new javax.swing.JTextPane();
        scrollTextSend = new javax.swing.JScrollPane();
        txtSend = new javax.swing.JTextPane();
        btnSend = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("BattleBoats Lobby");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        scrollPlayers.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        scrollPlayers.setViewportView(listPlayers);

        scrollChat.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        txtChat.setEditable(false);
        scrollChat.setViewportView(txtChat);

        scrollTextSend.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrollTextSend.setViewportView(txtSend);

        btnSend.setText("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpMainLobbyLayout = new javax.swing.GroupLayout(jpMainLobby);
        jpMainLobby.setLayout(jpMainLobbyLayout);
        jpMainLobbyLayout.setHorizontalGroup(
            jpMainLobbyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpMainLobbyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpMainLobbyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollChat)
                    .addComponent(scrollTextSend)
                    .addGroup(jpMainLobbyLayout.createSequentialGroup()
                        .addGap(0, 471, Short.MAX_VALUE)
                        .addComponent(btnSend)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollPlayers, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jpMainLobbyLayout.setVerticalGroup(
            jpMainLobbyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpMainLobbyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpMainLobbyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPlayers)
                    .addGroup(jpMainLobbyLayout.createSequentialGroup()
                        .addComponent(scrollChat, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrollTextSend, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSend)
                        .addGap(0, 3, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpMainLobby, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpMainLobby, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            running = false;
            s.terminateNotify();
            s.terminateConnection();
            System.exit(0);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_formWindowClosing

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        try {
            chatText.append(s.getPlayer().getUserName());
            chatText.append(": ");
            chatText.append(txtSend.getText());
            chatText.append("\n");
            txtChat.setText(chatText.toString());
            s.writeObject(new SystemMessage(MsgType.LobbyChat, txtSend.getText()));
            
            txtSend.setText("");
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnSendActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if (evt.getKeyCode() == VK_ENTER) {
            btnSend.doClick();
        }
    }//GEN-LAST:event_formKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSend;
    private javax.swing.JPanel jpMainLobby;
    private javax.swing.JList<String> listPlayers;
    private javax.swing.JScrollPane scrollChat;
    private javax.swing.JScrollPane scrollPlayers;
    private javax.swing.JScrollPane scrollTextSend;
    private javax.swing.JTextPane txtChat;
    private javax.swing.JTextPane txtSend;
    // End of variables declaration//GEN-END:variables
}
